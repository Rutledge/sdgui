package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.37

import (
	"context"
	"fmt"

	"github.com/tmc/sdgui/backend/graph/model"
)

// CreateProgram is the resolver for the createProgram field.
func (r *mutationResolver) CreateProgram(ctx context.Context, description string) (*model.Program, error) {
	panic(fmt.Errorf("not implemented: CreateProgram - createProgram"))
}

// RegenerateProgram is the resolver for the regenerateProgram field.
func (r *mutationResolver) RegenerateProgram(ctx context.Context, input model.RegenerateProgramInput) (*model.Program, error) {
	panic(fmt.Errorf("not implemented: RegenerateProgram - regenerateProgram"))
}

// Programs is the resolver for the programs field.
func (r *queryResolver) Programs(ctx context.Context) ([]*model.Program, error) {
	panic(fmt.Errorf("not implemented: Programs - programs"))
}

// ObserveProgram is the resolver for the observeProgram field.
func (r *subscriptionResolver) ObserveProgram(ctx context.Context, id string) (<-chan *model.Program, error) {
	panic(fmt.Errorf("not implemented: ObserveProgram - observeProgram"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
